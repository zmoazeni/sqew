{"name":"Sqew","body":"# sqew (pronounced \"skew\")\r\n\r\nsqew is a lightweight background processor. You start a single process that will act as a queue manager and will work multiple jobs concurrently. sqew is short for \"small queue\" and is not meant to be an all-in-one scalable solution. sqew adopts a common enqueuing API found in other projects to make migrating to other background processors easy.\r\n\r\n<a href=\"http://www.flickr.com/photos/adriannier/5367065485/\"><img src=\"https://github.com/zmoazeni/sqew/raw/master/skewed-pole.jpg\" alt=\"A skewed photograph by http://www.flickr.com/photos/adriannier/5367065485/\" /></a>\r\n\r\n(image by http://www.flickr.com/photos/adriannier/5367065485/ )\r\n\r\n## When would sqew be a good fit for my project?\r\n\r\n* You don't need to split workers across multiple machines.\r\n* You don't want to manage multiple background worker processes, but you do want multiple jobs to run concurrently.\r\n* You don't want to manage an external service like Redis or Mongo to store the queue.\r\n* You don't want to worry about threading issues.\r\n* You don't want to worry about long running processes leaking memory.\r\n* You don't care about the enqueueing or job forking performance.\r\n* You don't need multiple queues (this may change soon).\r\n\r\nIf these don't fit the bill or you need more power, I recommend you try the great other great gems such as [Resque](https://github.com/defunkt/resque), [Sidekiq](https://github.com/mperham/sidekiq), and [Qu](https://github.com/bkeepers/qu).\r\n\r\n## Rails Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem sqew, :require \"sqew/rails\"\r\n\r\nAdd an initializer in `config/initializers/sqew.rb`\r\n\r\n    Sqew.configure do |config|\r\n      config.db = \"#{Rails.root}/tmp/\"\r\n      config.server = \"http://0.0.0.0:8884\"\r\n    end\r\n\r\nThe `db` config will be a directory where sqew will manage its databases, and the `server` config is what what the worker will connect at as well as where the application will post jobs to.\r\n\r\nOnce you have sqew configured, you can start the queue manager by running `rake sqew:work`. This will manage the queues, it'll act as a server where the application post jobs, and it will work the jobs as the arrive.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem sqew\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install sqew\r\n    \r\n## The Sqew Manager\r\n\r\nThe Sqew manager is a JSON API for inspecting the queue, pushing work onto the queue, and manipulating the queue and workers. Actions you can perform are:\r\n\r\n    # enqueue a job\r\n    # Sqew.push(TheJobClass, 1, 2, 3)\r\n    POST /enqueue\r\n      {\"job\":\"TheJobClass\", \"args\":[1, 2, 3]}\r\n    \r\n    # ping the server to programatically see if it is alive\r\n    # Sqew.ping\r\n    GET /ping\r\n    \r\n    # get the status of the queue, running jobs, failed jobs, and how many workers the server will use\r\n    # Sqew.status\r\n    GET /status\r\n    \r\n    # dynamically change the number of workers (processes) the manager will use\r\n    # Sqew.workers = 10 (the default is 3)\r\n    PUT /workers\r\n      \"10\"\r\n    \r\n    # clear the entire queue\r\n    # Sqew.clear\r\n    DELETE /clear\r\n    \r\n    # clear just the failed jobs\r\n    # Sqew.clear(\"failed\")\r\n    DELETE /clear\r\n      failed\r\n    \r\n    # delete a specific job by id\r\n    # Sqew.delete(11)\r\n    DELETE /11\r\n  \r\n## Enqueuing jobs\r\n\r\nFrom your application you will create jobs just like [Resque](https://github.com/defunkt/resque), [Sidekiq](https://github.com/mperham/sidekiq), and [Qu](https://github.com/bkeepers/qu) in the form of\r\n\r\n    class MyJob\r\n      def perform(arg1, arg2)\r\n        # .. the job code\r\n      end\r\n    end\r\n\r\nAnd the manager will receive the job and start working on it when it can. You can enqueue the job from Sqew:\r\n\r\n    Sqew.push(MyJob, 1, 2)\r\n    \r\nIf you're using Rails 4 you can enqueue the job by using the Rails queuing API:\r\n\r\n    Rails.queue.push(MyJob, 1, 2)\r\n\r\n## Is it any good?\r\n\r\n[Yes.](http://news.ycombinator.com/item?id=3067434)\r\n\r\n## Where does sqew store its data?\r\n\r\nSqew doesn't use redis or your rails database. It uses [LevelDB](http://code.google.com/p/leveldb/) to manage its persistence. So you don't have to manage/setup anything.\r\n\r\n## Does it work on windows?\r\n\r\nNo. It uses [forking](http://en.wikipedia.org/wiki/Fork_(operating_system\\)) heavily.\r\n\r\n## TODO Soon\r\n\r\n* Reusable God/Bluepil/Monit config for managing the worker\r\n* Capistrano plugin for restarting the worker on deploy\r\n* Javascript browser front-end for the manager\r\n* Multiple queues with weight (possibly)\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","tagline":"A lightweight single process background worker for Ruby","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}